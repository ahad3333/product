definitions:
  models.Branch:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Bucket:
    properties:
      branch_id:
        type: string
      client_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Category:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      type:
        items:
          $ref: '#/definitions/models.CategoryPrduct'
        type: array
      updated_at:
        type: string
    type: object
  models.CategoryPrduct:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      type_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Client:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateBranch:
    properties:
      name:
        type: string
    type: object
  models.CreateBucket:
    properties:
      branch_id:
        type: string
      client_id:
        type: string
      product_id:
        type: string
    type: object
  models.CreateCategory:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      type_id:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateClient:
    properties:
      name:
        type: string
    type: object
  models.CreateProduct:
    properties:
      branch_id:
        type: string
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  models.CreateUser:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  models.Empty:
    type: object
  models.GetBucketByClientID:
    properties:
      branch_id:
        type: string
      client_id:
        type: string
    type: object
  models.GetBucketByClientResponse:
    properties:
      total_price:
        type: integer
    type: object
  models.GetListCategoryResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.CreateCategory'
        type: array
      count:
        type: integer
    type: object
  models.GetListProductResponse:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Productlist'
        type: array
      count:
        type: integer
    type: object
  models.GetListUserResponse:
    properties:
      count:
        type: integer
      user:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Login:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      key:
        type: string
    type: object
  models.Product:
    properties:
      branch_id:
        type: string
      category_id:
        $ref: '#/definitions/models.CategoryPrduct'
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  models.Productlist:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  models.UpdateCategoryPut:
    properties:
      branch_id:
        type: string
      category_id:
        type: string
      name:
        type: string
      photo:
        type: string
    type: object
  models.UpdateProductPut:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  models.UpdateUserSwag:
    properties:
      branch_id:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /branch:
    post:
      consumes:
      - application/json
      description: CreateBranch
      operationId: CreateBranch
      parameters:
      - description: CreateBranchRequestBody
        in: body
        name: Branch
        required: true
        schema:
          $ref: '#/definitions/models.CreateBranch'
      produces:
      - application/json
      responses:
        "201":
          description: GetBranchtBody
          schema:
            $ref: '#/definitions/models.Branch'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateBranch
      tags:
      - Branch_1
  /bucket:
    post:
      consumes:
      - application/json
      description: CreateBucket
      operationId: CreateBucket
      parameters:
      - description: CreateBucketRequestBody
        in: body
        name: Bucket
        required: true
        schema:
          $ref: '#/definitions/models.CreateBucket'
      produces:
      - application/json
      responses:
        "201":
          description: GetBuckettBody
          schema:
            $ref: '#/definitions/models.Bucket'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateBucket
      tags:
      - Bucket_7
  /casier:
    post:
      consumes:
      - application/json
      description: CreateCasier
      operationId: CreateCasier
      parameters:
      - description: GetBucketByClientIDBody
        in: body
        name: Bucket
        required: true
        schema:
          $ref: '#/definitions/models.GetBucketByClientID'
      produces:
      - application/json
      responses:
        "201":
          description: GetBucketByClientResponseBody
          schema:
            $ref: '#/definitions/models.GetBucketByClientResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateCasier
      tags:
      - Bucket_7
  /category:
    get:
      consumes:
      - application/json
      description: Get List Category
      operationId: get_list_category
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCategoryListBody
          schema:
            $ref: '#/definitions/models.GetListCategoryResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Category
      tags:
      - Category_4
    post:
      consumes:
      - application/json
      description: Create Category
      operationId: create_category
      parameters:
      - description: CreateCategoryRequestBody
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryPut'
      produces:
      - application/json
      responses:
        "201":
          description: GetCategoryBody
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Create Category
      tags:
      - Category_4
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Category
      operationId: delete_category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteCategoryBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Category
      tags:
      - Category_4
    get:
      consumes:
      - application/json
      description: Get By ID Category
      operationId: get_by_id_category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCategoryBody
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get By ID Category
      tags:
      - Category_4
    put:
      consumes:
      - application/json
      description: Update Category
      operationId: update_category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateCategoryRequestBody
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryPut'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateCategoryBody
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Category
      tags:
      - Category_4
  /client:
    post:
      consumes:
      - application/json
      description: CreateClient
      operationId: CreateClient
      parameters:
      - description: CreateClientRequestBody
        in: body
        name: Client
        required: true
        schema:
          $ref: '#/definitions/models.CreateClient'
      produces:
      - application/json
      responses:
        "201":
          description: GetClienttBody
          schema:
            $ref: '#/definitions/models.Client'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateClient
      tags:
      - Client_6
  /login:
    post:
      consumes:
      - application/json
      description: Login
      operationId: Login
      parameters:
      - description: loginBodyRequest
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "201":
          description: LoginResponseBody
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Login
      tags:
      - Auth_3
  /product:
    get:
      consumes:
      - application/json
      description: Get List product
      operationId: ProductPrimeryKey
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetProdctListBody
          schema:
            $ref: '#/definitions/models.GetListProductResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Product
      tags:
      - Product_5
    post:
      consumes:
      - application/json
      description: CreateProduct
      operationId: CreateProduct
      parameters:
      - description: CreateProductRequestBody
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProduct'
      produces:
      - application/json
      responses:
        "201":
          description: GetProductBody
          schema:
            $ref: '#/definitions/models.CreateProduct'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateProduct
      tags:
      - Product_5
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product
      operationId: DeleteProduct
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteProductBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Product
      tags:
      - Product_5
    get:
      consumes:
      - application/json
      description: GetByID Product
      operationId: Get_By_IDProduct
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: GetByIDProductBody
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: GetByID Product
      tags:
      - Product_5
    put:
      consumes:
      - application/json
      description: Update Product
      operationId: UpdateProduct
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateProductRequestBody
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductPut'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateProductBody
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Product
      tags:
      - Product_5
  /user:
    get:
      consumes:
      - application/json
      description: Get List user
      operationId: UserPrimeryKey
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetUserListBody
          schema:
            $ref: '#/definitions/models.GetListUserResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List User
      tags:
      - User_2
    post:
      consumes:
      - application/json
      description: CreateUser
      operationId: CreateUser
      parameters:
      - description: CreateUserRequestBody
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserSwag'
      produces:
      - application/json
      responses:
        "201":
          description: GetUsertBody
          schema:
            $ref: '#/definitions/models.CreateUser'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateUser
      tags:
      - User_2
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      operationId: DeleteUser
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteUserBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete User
      tags:
      - User_2
    get:
      consumes:
      - application/json
      description: GetByID User
      operationId: Get_By_IDUser
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: GetByIDUserBody
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: GetByID User
      tags:
      - User_2
    put:
      consumes:
      - application/json
      description: Update User
      operationId: UpdateUser
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateUserRequestBody
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserSwag'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateUserBody
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update User
      tags:
      - User_2
swagger: "2.0"
