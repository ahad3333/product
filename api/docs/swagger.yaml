definitions:
  models.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      type:
        items:
          $ref: '#/definitions/models.CategoryPrduct'
        type: array
      updated_at:
        type: string
    type: object
  models.CategoryPrduct:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      type_id:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateCategory:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      type_id:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateProduct:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
  models.Empty:
    type: object
  models.GetListCategoryResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.CreateCategory'
        type: array
      count:
        type: integer
    type: object
  models.GetListProductResponse:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Productlist'
        type: array
      count:
        type: integer
    type: object
  models.Product:
    properties:
      category_id:
        $ref: '#/definitions/models.CategoryPrduct'
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  models.Productlist:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  models.UpdateCategoryPut:
    properties:
      category_id:
        type: string
      name:
        type: string
      photo:
        type: string
    type: object
  models.UpdateProductPut:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      photo:
        type: string
      price:
        type: number
    type: object
info:
  contact: {}
paths:
  /category:
    get:
      consumes:
      - application/json
      description: Get List Category
      operationId: get_list_category
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCategoryListBody
          schema:
            $ref: '#/definitions/models.GetListCategoryResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Category
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create Category
      operationId: create_category
      parameters:
      - description: CreateCategoryRequestBody
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "201":
          description: GetCategoryBody
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Create Category
      tags:
      - Category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Category
      operationId: delete_category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteCategoryBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Category
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get By ID Category
      operationId: get_by_id_category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCategoryBody
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get By ID Category
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update Category
      operationId: update_category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateCategoryRequestBody
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryPut'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateCategoryBody
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Category
      tags:
      - Category
  /product:
    get:
      consumes:
      - application/json
      description: Get List product
      operationId: ProductPrimeryKey
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetProdctListBody
          schema:
            $ref: '#/definitions/models.GetListProductResponse'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get List Product
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: CreateProduct
      operationId: CreateProduct
      parameters:
      - description: CreateProductRequestBody
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProduct'
      produces:
      - application/json
      responses:
        "201":
          description: GetProductBody
          schema:
            $ref: '#/definitions/models.CreateProduct'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: CreateProduct
      tags:
      - Product
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product
      operationId: DeleteProduct
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: DeleteProductBody
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Delete Product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: GetByID Product
      operationId: Get_By_IDProduct
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: GetByIDProductBody
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: GetByID Product
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update Product
      operationId: UpdateProduct
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateProductRequestBody
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductPut'
      produces:
      - application/json
      responses:
        "202":
          description: UpdateProductBody
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid Argumant
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Update Product
      tags:
      - Product
swagger: "2.0"
